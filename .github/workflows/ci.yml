name: Celestia CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  POSTGRES_VERSION: '14'

jobs:
  # ========== BACKEND TESTS ==========
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: celestia_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci
      
      - name: Run database migrations
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/celestia_test
        run: npm run migrate
      
      - name: Run unit tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/celestia_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_secret_key_for_ci
          ENCRYPTION_KEY: 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
        run: npm run test:unit
      
      - name: Run integration tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/celestia_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_secret_key_for_ci
          ENCRYPTION_KEY: 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
        run: npm run test:integration
      
      - name: Generate coverage report
        working-directory: ./backend
        run: npm run test:coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # ========== MOBILE TESTS ==========
  mobile-tests:
    name: Mobile Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: mobile/package-lock.json
      
      - name: Install dependencies
        working-directory: ./mobile
        run: npm ci
      
      - name: Run linter
        working-directory: ./mobile
        run: npm run lint
      
      - name: Run type check
        working-directory: ./mobile
        run: npm run type-check
      
      - name: Run unit tests
        working-directory: ./mobile
        run: npm test -- --coverage --watchAll=false
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./mobile/coverage/lcov.info
          flags: mobile
          name: mobile-coverage

  # ========== SECURITY SCANNING ==========
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Run npm audit (backend)
        working-directory: ./backend
        run: npm audit --audit-level=moderate
        continue-on-error: true
      
      - name: Run npm audit (mobile)
        working-directory: ./mobile
        run: npm audit --audit-level=moderate
        continue-on-error: true
      
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # ========== LINT & FORMAT ==========
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Backend - Install & Lint
        working-directory: ./backend
        run: |
          npm ci
          npm run lint
      
      - name: Mobile - Install & Lint
        working-directory: ./mobile
        run: |
          npm ci
          npm run lint
      
      - name: Check Prettier formatting
        run: |
          npx prettier --check "**/*.{ts,tsx,js,jsx,json,md}"

  # ========== BUILD BACKEND DOCKER IMAGE ==========
  build-backend:
    name: Build Backend Docker Image
    runs-on: ubuntu-latest
    needs: [backend-tests, security-scan]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: celestia/backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ========== BUILD MOBILE APP (Android) ==========
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    needs: [mobile-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup Expo
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
      
      - name: Install dependencies
        working-directory: ./mobile
        run: npm ci
      
      - name: Build Android APK
        working-directory: ./mobile
        run: |
          eas build --platform android --profile production --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      
      - name: Upload APK artifact
        uses: actions/upload-artifact@v3
        with:
          name: android-apk
          path: mobile/build/*.apk
          retention-days: 30

  # ========== BUILD MOBILE APP (iOS) ==========
  build-ios:
    name: Build iOS IPA
    runs-on: macos-latest
    needs: [mobile-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup Expo
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
      
      - name: Install dependencies
        working-directory: ./mobile
        run: npm ci
      
      - name: Build iOS IPA
        working-directory: ./mobile
        run: |
          eas build --platform ios --profile production --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      
      - name: Upload IPA artifact
        uses: actions/upload-artifact@v3
        with:
          name: ios-ipa
          path: mobile/build/*.ipa
          retention-days: 30

  # ========== DEPLOY TO STAGING ==========
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-backend, lint-and-format]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging-api.celestia-app.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Deploy to ECS (Staging)
        run: |
          aws ecs update-service \
            --cluster celestia-staging \
            --service celestia-backend-staging \
            --force-new-deployment
      
      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster celestia-staging \
            --services celestia-backend-staging
      
      - name: Run smoke tests
        run: |
          curl -f https://staging-api.celestia-app.example.com/health || exit 1

  # ========== DEPLOY TO PRODUCTION ==========
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-backend, build-android, build-ios]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.celestia-app.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Deploy to ECS (Production)
        run: |
          aws ecs update-service \
            --cluster celestia-production \
            --service celestia-backend-production \
            --force-new-deployment
      
      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster celestia-production \
            --services celestia-backend-production
      
      - name: Run smoke tests
        run: |
          curl -f https://api.celestia-app.example.com/health || exit 1
      
      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: 'Production deployment successful! 🚀'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      
      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: 'Production deployment failed! ❌'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # ========== DATA VALIDATION ==========
  validate-horoscopes:
    name: Validate Horoscope Data
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Validate JSON structure
        run: |
          node -e "
            const fs = require('fs');
            const horoscopes = JSON.parse(fs.readFileSync('horoscopes_month1.json', 'utf8'));
            
            // Check we have 360 entries (30 days × 12 signs)
            if (horoscopes.length !== 360) {
              throw new Error(\`Expected 360 entries, got \${horoscopes.length}\`);
            }
            
            // Validate each entry
            horoscopes.forEach((h, i) => {
              if (!h.zodiac_sign || !h.date || !h.content || !h.action_prompt) {
                throw new Error(\`Entry \${i} missing required fields\`);
              }
              
              // Check for deterministic language
              const deterministic = ['will', 'shall', 'must', 'definitely', 'certainly'];
              const hasDeterministic = deterministic.some(word => 
                h.content.toLowerCase().includes(word)
              );
              if (hasDeterministic) {
                throw new Error(\`Entry \${i} contains deterministic language: \${h.content}\`);
              }
              
              // Check for probabilistic language
              const probabilistic = ['may', 'might', 'could', 'possible', 'perhaps'];
              const hasProbabilistic = probabilistic.some(word => 
                h.content.toLowerCase().includes(word)
              );
              if (!hasProbabilistic) {
                console.warn(\`Warning: Entry \${i} lacks probabilistic language\`);
              }
            });
            
            console.log('✅ All horoscope entries validated successfully');
          "
      
      - name: Check for prohibited content
        run: |
          node -e "
            const fs = require('fs');
            const horoscopes = JSON.parse(fs.readFileSync('horoscopes_month1.json', 'utf8'));
            
            const prohibited = ['death', 'die', 'fatal', 'terminal', 'lawsuit', 'fired', 'bankrupt'];
            const violations = [];
            
            horoscopes.forEach((h, i) => {
              prohibited.forEach(word => {
                if (h.content.toLowerCase().includes(word)) {
                  violations.push(\`Entry \${i} contains prohibited word: \${word}\`);
                }
              });
            });
            
            if (violations.length > 0) {
              console.error('❌ Prohibited content found:');
              violations.forEach(v => console.error(v));
              process.exit(1);
            }
            
            console.log('✅ No prohibited content found');
          "

  # ========== ACCESSIBILITY TESTING ==========
  accessibility-test:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install dependencies
        working-directory: ./mobile
        run: npm ci
      
      - name: Run accessibility audit
        working-directory: ./mobile
        run: npm run test:accessibility
        continue-on-error: true